#+title: Notes

* Isometric Engine
** Camera abstraction (width, height, position)
** World concept (Engine Container)
- uWidth, vWidth -> width, height
** IsometricEntity
- zuv, centered at feet

* Grid engine
** Coordinates
RCL -> row, column, level

* Packing sprites
Use https://github.com/dev-namespace/pixi-spritesheet-packer

* Reactive Architecture
** Entities are completely separated from the rendering
** Engines react to entity changes
** Engines
*** GraphicsEngine (wrapper over PIXI.js)
***  > IsometricEngine
***    > GridEngine
***      > BattleEngine
***        > GameEngine

** Global vs Local stores
There's a rootStore globally accesible across the whole project for convenience.

However, independent 'rootstores' can be created in order to enable features such as having multiple canvas instances with their own ~Engine~ stores.

* Performance
** MobX impact
1000 frame entities moving -> 53% CPU
1000 frame entities moving (mobX) -> 70% CPU
** Reordering based on zIndex is very expensive
